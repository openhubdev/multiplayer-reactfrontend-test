{"version":3,"sources":["Network.js","App.js","index.js"],"names":["network","serverUrl","color","updateSelfId","handleStateUpdate","this","socket","io","connect","on","id","emit","positionData","Player","position","props","useSpring","transform","x","y","config","mass","tension","friction","div","className","style","App","useState","boardOffset","setBoardOffset","selfPosition","setSelfPosition","selfColor","setSelfColor","selfId","setSelfId","players","setPlayers","useEffect","rand","Math","random","init","handleResize","el","rect","getBoundingClientRect","scrollLeft","window","pageXOffset","document","documentElement","scrollTop","pageYOffset","left","top","offset","querySelector","addEventListener","removeEventListener","onPointerDown","clientX","clientY","sendPosition","Object","entries","map","data","ReactDOM","render","StrictMode","getElementById"],"mappings":"iSAuBeA,EAFC,I,oFAlBd,SAAKC,EAAWC,EAAOC,EAAcC,GAAoB,IAAD,OACtDC,KAAKC,OAASC,IAAGC,QAAQP,GACzBI,KAAKC,OAAOG,GAAG,WAAW,WAExBN,EAAa,EAAKG,OAAOI,IAGzB,EAAKJ,OAAOG,GAAG,cAAeL,GAG9B,EAAKE,OAAOK,KAAK,aAAc,CAAET,MAAOA,S,0BAG5C,SAAaU,GACXP,KAAKC,OAAOK,KAAK,iBAAkBC,O,cC6DvC,SAASC,EAAT,GAA8C,IAA5BC,EAA2B,EAA3BA,SAA2B,IAAjBZ,aAAiB,MAAT,MAAS,EACrCa,EAAQC,oBAAU,CACtBC,UAAU,eAAD,OAAiBH,EAASI,EAA1B,eAAkCJ,EAASK,EAA3C,UACTC,OAAQ,CAAEC,KAAM,EAAGC,QAAS,GAAIC,SAAU,MAE5C,OAAO,cAAC,WAASC,IAAV,CAAcC,UAAS,iBAAYvB,GAASwB,MAAOX,IAW7CY,MAvFf,WAAgB,IAAD,EACyBC,mBAAS,CAAEV,EAAG,EAAGC,EAAG,IAD7C,mBACNU,EADM,KACOC,EADP,OAE2BF,mBAAS,CAAEV,EAAG,IAAKC,EAAG,MAFjD,mBAENY,EAFM,KAEQC,EAFR,OAGqBJ,mBAAS,MAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAIeN,mBAAS,MAJxB,mBAINO,EAJM,KAIEC,EAJF,OAKiBR,mBAAS,IAL1B,mBAKNS,EALM,KAKGC,EALH,KAOPlC,EAAoB,SAACiC,GACzBC,EAAWD,IAQbE,qBAAU,WAIR,IAAMC,EAAOC,KAAKC,SACZxC,EAAQsC,EAAO,IAAO,MAAQA,EAAO,IAAO,OAAS,QAC3DN,EAAahC,GACbF,EAAQ2C,KAzBM,8CAyBUzC,EAAOkC,EAAWhC,KACzC,IAGH,IAAMwC,EAAe,WACnBd,EAoDJ,SAAgBe,GACd,IAAIC,EAAOD,EAAGE,wBACZC,EAAaC,OAAOC,aAAeC,SAASC,gBAAgBJ,WAC5DK,EAAYJ,OAAOK,aAAeH,SAASC,gBAAgBC,UAC7D,MAAO,CAAEnC,EAAG4B,EAAKS,KAAOP,EAAY7B,EAAG2B,EAAKU,IAAMH,GAxDjCI,CAAON,SAASO,cAAc,aAU/C,OARAnB,qBAAU,WAGR,OAFAK,IACAK,OAAOU,iBAAiB,SAAUf,GAC3B,WACLK,OAAOW,oBAAoB,SAAUhB,MAEtC,IAGD,qBAAKnB,UAAU,MAAf,SACE,qBACEA,UAAU,QACVoC,cAAe,YAA2B,IA/BlB3C,EAAGC,EA+BT2C,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QA/BH7C,EAiCpB4C,EAAUjC,EAAYX,EAjCCC,EAkCvB4C,EAAUlC,EAAYV,EAjC9Ba,EAAgB,CAAEd,IAAGC,MACrBnB,EAAQgE,aAAa,CAAE9C,IAAGC,OA2BxB,SASE,sBAAKM,UAAU,YAAf,UAEGwC,OAAOC,QAAQ7B,GAAS8B,KAAI,YAAiB,IAAD,mBAAdzD,EAAc,KAAV0D,EAAU,KAC3C,OAAI1D,IAAOyB,EAAe,KAExB,cAACtB,EAAD,CAEEC,SAAUsD,EAAKtD,SACfZ,MAAOkE,EAAKlE,OAHd,gBACgBQ,OAQpB,cAACG,EAAD,CAAQC,SAAUiB,EAAc7B,MAAO+B,YCjEjDoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASqB,eAAe,W","file":"static/js/main.2f99377c.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nclass Network {\n  init(serverUrl, color, updateSelfId, handleStateUpdate) {\n    this.socket = io.connect(serverUrl);\n    this.socket.on('connect', () => {\n      // Get self ID from the connected socket and store\n      updateSelfId(this.socket.id);\n\n      // register for state updates from the server\n      this.socket.on('stateUpdate', handleStateUpdate);\n\n      // tell server to create the player with a color\n      this.socket.emit('initialize', { color: color });\n    });\n  }\n  sendPosition(positionData) {\n    this.socket.emit('positionUpdate', positionData);\n  }\n}\n\nconst network = new Network();\n\nexport default network;\n","import './App.css';\nimport { useState, useEffect } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport network from './Network';\n\nconst serverUrl = 'https://simple-multiplayer-server.glitch.me';\n\nfunction App() {\n  const [boardOffset, setBoardOffset] = useState({ x: 0, y: 0 });\n  const [selfPosition, setSelfPosition] = useState({ x: 250, y: 250 });\n  const [selfColor, setSelfColor] = useState(null);\n  const [selfId, setSelfId] = useState(null);\n  const [players, setPlayers] = useState({});\n\n  const handleStateUpdate = (players) => {\n    setPlayers(players);\n  };\n\n  const handleUpdatePosition = (x, y) => {\n    setSelfPosition({ x, y });\n    network.sendPosition({ x, y });\n  };\n\n  useEffect(() => {\n    // On mount:\n    // - randomly choose a color\n    // - connect to network\n    const rand = Math.random();\n    const color = rand < 0.33 ? 'red' : rand < 0.66 ? 'blue' : 'green';\n    setSelfColor(color);\n    network.init(serverUrl, color, setSelfId, handleStateUpdate);\n  }, []);\n\n  // window resize handler\n  const handleResize = () => {\n    setBoardOffset(offset(document.querySelector('.board')));\n  };\n  useEffect(() => {\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div\n        className=\"board\"\n        onPointerDown={({ clientX, clientY }) => {\n          handleUpdatePosition(\n            clientX - boardOffset.x,\n            clientY - boardOffset.y\n          );\n        }}\n      >\n        <div className=\"metaballs\">\n          {/* render all other players */}\n          {Object.entries(players).map(([id, data]) => {\n            if (id === selfId) return null;\n            return (\n              <Player\n                key={`player${id}`}\n                position={data.position}\n                color={data.color}\n              />\n            );\n          })}\n\n          {/* render player separate from state updates for instant response */}\n          <Player position={selfPosition} color={selfColor} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// A Player's position is moved using React-Spring\nfunction Player({ position, color = 'red' }) {\n  const props = useSpring({\n    transform: `translate3d(${position.x}px, ${position.y}px ,0)`,\n    config: { mass: 1, tension: 70, friction: 10 },\n  });\n  return <animated.div className={`player ${color}`} style={props} />;\n}\n\n// Calculates page offset of our gameboard\nfunction offset(el) {\n  var rect = el.getBoundingClientRect(),\n    scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,\n    scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n  return { x: rect.left + scrollLeft, y: rect.top + scrollTop };\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}